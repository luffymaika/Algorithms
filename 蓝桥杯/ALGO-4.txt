问题描述
有一棵 n 个节点的树，树上每个节点都有一个正整数权值。如果一个点被选择了，那么在树上和它相邻的点都不能被选择。求选出的点的权值和最大是多少？

输入格式
第一行包含一个整数 n 。
接下来的一行包含 n 个正整数，第 i 个正整数代表点 i 的权值。
接下来一共 n-1 行，每行描述树上的一条边。

输出格式
输出一个整数，代表选出的点的权值和的最大值。

样例输入
5
1 2 3 4 5
1 2
1 3
2 4
2 5
样例输出
12
样例说明
选择3、4、5号点，权值和为 3+4+5 = 12 。

数据规模与约定
对于20%的数据， n <= 20。
对于50%的数据， n <= 1000。
对于100%的数据， n <= 100000。
权值均为不超过1000的正整数。

说明：用参考博客后改写成java，但会超时，C/C++则满分通过：
参考博客：https://blog.csdn.net/sinat_35637319/article/details/55218606

递归表达式    dp[x][0]+=max2(dp[k][0],dp[k][1]);（0不取x，1取x）
                        dp[x][1]+=dp[k][0];

代码：
import java.util.Arrays;
import java.util.Scanner;
public class Main {
	static int[][] dp;
//	static int[] vis;
	static int[] head;
	static int[][] next;
	public static void main(String args[]){
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
//		vis = new int[n+1];
		head = new int[n+1];
		next = new int[2*n][2];
		dp = new int[n+1][2];
		Arrays.fill(head, 0);
//		Arrays.fill(vis, 0);
		for(int i=1;i<=n;i++){
			dp[i][1]=in.nextInt();
		}
		int x=0;
		int y=0;
		for(int j=1;j<=n-1;j++){	//建立邻接表,next[j][0]表示连接的点的编号，next[j][1]表示下一条边的编号
			x = in.nextInt();
			y = in.nextInt();
			next[j][0]=y;
			next[j][1]=head[x];
			head[x]=j;
			next[n-1+j][0]=x;
			next[n-1+j][1]=head[y];
			head[y]=n-1+j;
		}
		in.close();
		dfs(1,0);
		System.out.println(dp[1][0]>dp[1][1]?dp[1][0]:dp[1][1]);
	}
	
	static void dfs(int x, int y){ // x表示当前节点，y表示父节点
		int h = head[x];
//		vis[x]=1;
		while(h!=0){
			int n = next[h][0];
			if(n==y){h = next[h][1];continue;}
			dfs(n,x);
			dp[x][0] += dp[n][0]>dp[n][1] ? dp[n][0]:dp[n][1];
			dp[x][1] += dp[n][0];
			h = next[h][1];
		}
	}
}