寒假作业现在小学的数学题目也不是那么好玩的。看看这个寒假作业：   □ + □ = □   □ - □ = □   □ × □ = □   □ ÷ □ = □      (如果显示不出来，可以参见【图1.jpg】)   每个方块代表1~13中的某一个数字，但不能重复。比如： 6  + 7 = 13 9  - 8 = 1 3  * 4 = 12 10 / 2 = 5以及：  7  + 6 = 13 9  - 8 = 1 3  * 4 = 12 10 / 2 = 5就算两种解法。（加法，乘法交换律后算不同的方案） 你一共找到了多少种方案？请填写表示方案数目的整数。注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。
答案：64
程序：
import java.util.Arrays;

public class Main {
	
	static boolean visted[] = new boolean[14];
	static int sum = 0;
	
	//    使用回溯法求解
	public static void f(int x){
		if(x==5){      //递归边界：能算过4次，说明前面的都已经满足条件
			sum=sum+1;
			return;
		}
		boolean ok=false;
		for(int i=1;i<14;i++){
			if(!visted[i]) visted[i]=true;
			else	continue;
			for(int j=1;j<14;j++){
				if(!visted[j])	visted[j]=true;
				else	continue;
				for(int k=1;k<14;k++){
					if(!visted[k])	visted[k]=true;
					else	continue;
					
					if(x==1){ok= i+j==k?true:false;}     //判断是否满足等式，不满足就回溯再生成；
					else if(x==2){ok = i-j==k?true:false;}
					else if(x==3){ok = i*j==k?true:false;}
					else if(x==4&&(i%j==0)){ok = i/j==k?true:false;} //此处取余是为了保证能够被整除，而不会出现11/2=5这种情况
					
					if(ok){;f(x+1);visted[k]=false;}
					else{visted[k]=false;continue;}
				}
				visted[j]=false;
			}
			visted[i]=false;
		}
	}
	
	public static void main(String[] args)
	{
		Arrays.fill(visted, false);
		f(1);
		System.out.println(sum);
	}
}